!function(e){var o={};function t(n){if(o[n])return o[n].exports;var s=o[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var s in e)t.d(n,s,function(o){return e[o]}.bind(null,s));return n},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=1)}([function(e,o){e.exports=require("mongoose")},function(e,o,t){"use strict";var n=this&&this.__awaiter||function(e,o,t,n){return new(t||(t=Promise))(function(s,r){function i(e){try{a(n.next(e))}catch(e){r(e)}}function l(e){try{a(n.throw(e))}catch(e){r(e)}}function a(e){e.done?s(e.value):new t(function(o){o(e.value)}).then(i,l)}a((n=n.apply(e,o||[])).next())})};Object.defineProperty(o,"__esModule",{value:!0});const s=t(2),r=t(0),i=t(3),l=t(4),a=t(5),d=t(6),u=t(7),c=t(8),m=t(9),f=t(10),g=t(11),p=t(12),y=t(13),v=t(14),h=t(15),x=t(16),S=t(17);var q=t(18);console.log(q);let b=[];b.push({name:"Av1",uri:"data:image/png;base64,"+S.readFileSync("./assets/avatar1.png","base64")}),b.push({name:"Av2",uri:"data:image/png;base64,"+S.readFileSync("./assets/avatar2.png","base64")}),b.push({name:"Av3",uri:"data:image/png;base64,"+S.readFileSync("./assets/avatar3.png","base64")}),b.push({name:"Av4",uri:"data:image/png;base64,"+S.readFileSync("./assets/avatar4.png","base64")}),b.push({name:"Av5",uri:"data:image/png;base64,"+S.readFileSync("./assets/avatar5.png","base64")});let k=[];k.push({name:"group",uri:"data:image/png;base64,"+S.readFileSync("./assets/group.png","base64")}),k.push({name:"noAv",uri:"data:image/png;base64,"+S.readFileSync("./assets/noavatar.jpeg","base64")}),c.config();const w=s();w.use(d()),r.connect("mongodb://localhost:27017/Chat",{useNewUrlParser:!0}).then(()=>console.log(`${process.env.USER} Connected to MongoDB `)).catch(e=>console.log(e)),w.use(a.urlencoded({extended:!1})),w.use(a.json()),w.use(u()),w.use(l()),w.use(i("common")),w.get("/",(e,o)=>{o.json({home:"Key generation route"})}),w.get("**",(e,o)=>{o.json({success:"Hello world from express"})});const O=f.createServer(w),T=m(O);O.listen(process.env.PORT,()=>{console.log(`Express Server on port: ${process.env.PORT}`)});const E=e=>{const{username:o,password:t,passwordc:n}=e;let s={username:"",password:"",passwordc:""};return null==o||""===o?s.username="the username is a required field":(o.length<3||o.length>35)&&(s.username="يجب على الاسم أن يتكون من 3~35 حرف"),null==t||""===t?s.password="the password is a required field":t.length<8||t.length>35?s.password="the password must be 8~35 characters":null!=n&&n!==t&&(s.passwordc="the two passwords must be equal"),null==n?(delete s.passwordc,s.password+s.username===""?{isValid:!0,errors:s}:{isValid:!1,errors:s}):s.password+s.passwordc+s.username===""?{isValid:!0,errors:s}:{isValid:!1,errors:s}};T.on("connection",e=>{console.log(`socket: ${e.id} connected`),e.on("validateRegister",o=>n(this,void 0,void 0,function*(){let{errors:t,isValid:n}=E(o);if(n)try{let n=yield p.default.findOne({username:o.username});return n?(t.passwordc=`${n.username} is used by another user`,void T.to(e.id).emit("status",{status:`${n.username} is used by another user`,errors:t})):void T.to(e.id).emit("validatedInput",o.username)}catch(e){return void console.log(e)}else T.to(e.id).emit("status",{status:`${e.id}'s reg-form is invalid`,errors:t}),console.log({authRefused:`${e.id}'s reg-form is invalid`,errors:t})})),e.on("register",o=>n(this,void 0,void 0,function*(){let{password:t,username:n,publicKey:s}=o;try{let o=yield g.genSalt(10),r=yield g.hash(t,o);const i=new p.default({username:n,password:r,publicKey:s,avatar:k[yield k.findIndex(e=>"noAv"===e.name)]});yield i.save(),T.to(e.id).emit("registered")}catch(e){return void console.log(e)}})),e.on("loginRequest",o=>n(this,void 0,void 0,function*(){let{username:t,password:n}=o;console.log(`${t} is trying to login`);const{isValid:s,errors:r}=E(o);if(s)try{let o=yield p.default.findOne({username:t});if(!o)return r.password="The user doesn't exist",console.log("the user doesn't exist"),void T.to(e.id).emit("status",{status:"The user doesn't exist",errors:r});if(!(yield g.compare(n,o.password)))return r.password="The password is invalid",void T.to(e.id).emit("status",{status:"The password is Invalid",errors:r});{let t=yield h.randomBytes(32).toString("hex"),n=yield new y.default({token:t,user:o._id});o.session=n._id;let s=yield n.save(),r=yield o.save();T.to(e.id).emit("token",{token:s.token,publicKey:r.publicKey,avatar:r.avatar,username:r.username})}}catch(e){console.log(e)}else T.to(e.id).emit("status",{status:"invalid registeration form",errors:r})})),e.on("assignKey",o=>n(this,void 0,void 0,function*(){console.log("Assigning a new key");let{token:t,username:n,publicKey:s}=o;try{let o=yield y.default.findOne({token:t});if(!o)return void console.log("The Session Doesn't Exist");{let t=yield p.default.findById(o.user);if(!t)return void console.log("The User Doesn't Exist");{t.publicKey=s;let n=yield t.save();T.to(e.id).emit("keyPairAssigned",{token:o.token,username:n.username,avatar:n.avatar})}}}catch(e){console.log(e)}})),e.on("validateToken",o=>n(this,void 0,void 0,function*(){console.log("token",o);let t=yield y.default.findOne({token:o});if(t){console.log("The Session Exists");let o=yield p.default.findById(t.user);if(o){console.log("Token is Valid");let n={token:t.token,avatar:o.avatar,username:o.username,publicKey:o.publicKey};return void T.to(e.id).emit("validToken",n)}console.log("The User Doesn't Exist")}else console.log("TokenValidation:||:The Session Doesn't Exist")})),e.on("getImagesArray",o=>{5===b.length&&y.default.findOne({token:o.token},(o,t)=>{o?console.log(o):null!=t&&p.default.findById(t.user,(o,t)=>{o?console.log(o):null!=t&&T.to(e.id).emit("imagesArray",b)})})}),e.on("saveProfile",o=>{console.log("Received Image data"),y.default.findOne({token:o.token},(t,n)=>{t?console.log(t):null!=n&&p.default.findById(n.user,(t,s)=>{if(t)console.log(t);else if(null!=s){const t={token:n.token,username:s.username,avatar:s.avatar};if(o.avatar===s.avatar)return void T.to(e.id).emit("profileSaved",t);s.avatar=o.avatar,s.save((o,t)=>{if(o)console.log(o);else if(null!==t&&null!==t){const o={token:n.token,username:t.username,avatar:t.avatar};console.log("Saved profile"),T.to(e.id).emit("profileSaved",o)}})}})})}),e.on("createRoom",o=>n(this,void 0,void 0,function*(){let{token:t,name:n,avatar:s}=o;if(null==n||""===n)T.to(e.id).emit("groupFormError","اكتب اسم المجموعة");else if(n.length<3||n.length>35)T.to(e.id).emit("groupFormError","يجب على الاسم ان يتكون من 3~35 حرف");else try{let o=yield y.default.findOne({token:t});if(o){let t=yield p.default.findById(o.user);if(t){if(yield v.default.findOne({name:n}))T.to(e.id).emit("groupFormError","the room name is taken");else{let o=new v.default({name:n,leader:t.username,users:[t._id],to:[t._id],avatar:""===s?{uri:k[0].uri}:s});yield t.rooms.push(o._id);let r=yield o.save(),i=yield t.save();T.to(e.id).emit("roomCreated",r),e.join(o.name),console.log(`${i.username} created ${r.name}`)}}else T.to(e.id).emit("groupFormError","failed to get the user for room creation")}else T.to(e.id).emit("groupFormError","failed to get the session for room creation")}catch(e){return void console.log(e)}})),e.on("getRooms",o=>n(this,void 0,void 0,function*(){try{let t=yield y.default.findOne({token:o});if(!t)return void console.log("the user isn't authenticated");{let o=yield p.default.findById(t.user).populate("rooms");if(!o)return void console.log("the user doesn't exist");T.to(e.id).emit("rooms",o.rooms),o.rooms.forEach(o=>{e.join(o.name)}),console.log(`${o.username} has ${o.rooms.length} rooms`)}}catch(e){return void console.log(e)}})),e.on("logout",o=>{console.log(`${o.username} is logging out`),y.default.findOne({token:o.token},(o,t)=>{o?console.log(o):null!=t?(t.remove(),console.log("The Session is Removed"),T.to(e.id).emit("logedout")):console.log("The Session Doesn't Exist")})}),e.on("newMsg",e=>n(this,void 0,void 0,function*(){const{msg:o,token:t,roomName:n}=e;try{let e=yield y.default.findOne({token:t});if(!e)return void console.log("the user isn't authenticated");{let t=yield p.default.findById(e.user);if(!t)return void console.log("the user doesn't exist");{let e=yield v.default.findOne({name:n}).populate("users",["publicKey","username"]);console.log("newMsg[users]",e.users.length);let s=h.randomBytes(8).toString("hex"),r=h.randomBytes(32).toString("hex"),i=x.AES.encrypt(o,r,{iv:s,mode:x.mode.CBC,padding:x.pad.Pkcs7}).toString();console.log("cipher-text",i);let l=Buffer.from(r),a=t.username,d=[];if(!e)return void console.log("the room doesn't exist");if(e.users.forEach(e=>{let o=h.publicEncrypt({key:e.publicKey,padding:q.RSA_PKCS1_PADDING},l).toString("base64");d.push({username:e.username,publicKey:e.publicKey,key:o})}),d.length===e.users.length){e.chat.push({iv:s,from:a,to:d,isImg:!1,msg:i});let o=yield e.save();console.log(`${a} sent a msg to ${e.name}`),T.to(o.name).emit("Msg",{msg:i,to:d,iv:s,from:a,roomName:o.name})}}}}catch(e){return void console.log(e)}})),e.on("invite",o=>{const{room:t,user:n,username:s}=o;null==n||""===n?T.to(e.id).emit("groupFormError","اكتب اسم الشحص"):n.length<3||n.length>30?T.to(e.id).emit("groupFormError","يجب على الاسم أن يتكون من 3~35 حرف"):p.default.findOne({username:n},(o,n)=>{o?console.log(o):null==n?T.to(e.id).emit("groupFormError","لا يوجد هذا الشخص"):v.default.findOne({name:t},(o,t)=>{if(o)console.log(o);else if(null==t)console.log("The Room doesn't Exist");else if(t.leader===s)if(-1===n.rooms.indexOf(t._id)){-1===n.requests.findIndex(e=>e.roomName===t.name)?(n.requests.push({roomName:t.name,leader:t.leader}),n.save((o,s)=>{o?console.log(o):(T.to(e.id).emit("invited"),console.log(`Invited ${n.username} ==room==> ${t.name} `))})):T.to(e.id).emit("groupFormError","انتظر الشخص لكي يستجيب لدعوتك")}else T.to(e.id).emit("groupFormError","هذا الشخص عضو في المجموعة");else console.log("you have to be the leader of the room to invite")})})}),e.on("getRequests",o=>{y.default.findOne({token:o}).then(o=>{null!=o?p.default.findById(o.user).then(o=>null==o?void console.log("The User is unavailable"):(T.to(e.id).emit("userRequests",o.requests),void console.log(`Sent userRequests to ${o.username}`,o.requests))):console.log("The Session is Expired")}).catch(e=>console.log(e))}),e.on("acceptUserRequest",o=>{let{token:t,roomName:n}=o;y.default.findOne({token:t}).then(o=>{null!=o?p.default.findById(o.user).then(o=>{null!=o?v.default.findOne({name:n}).then(t=>{if(null==t)console.log("The Room is unavailable");else{let s=o.rooms.indexOf(t._id);if(console.log("refIndex",s),-1===s){t.users.push(o._id),o.rooms.push(t._id);let s=o.requests.findIndex(e=>e.roomName===n);o.requests.splice(s,1),t.save().then(t=>{o.save().then(o=>{console.log(`${o.username} joined ${t.name}`),e.join(t.name),T.to(e.id).emit("invitationAccepted",t.name)}).catch(e=>console.log(e))}).catch(e=>console.log(e))}else console.log("you are a member of this group")}}).catch(e=>console.log(e)):console.log("The User is unavailable")}):console.log("The Session is Expired")}).catch(e=>console.log(e))}),e.on("refuseUserRequest",o=>n(this,void 0,void 0,function*(){let{token:t,roomName:n}=o;try{let o=yield y.default.findOne({token:t});if(null==o)return void console.log("The Session Doesn't Exist");{let t=yield p.default.findById(o.user);if(null==t)return void console.log("The User Doesn't Exist");{let o=yield t.requests.findIndex(e=>e.roomName===n);yield t.requests.splice(o,1);let s=yield t.save();console.log("A User Invitation Has Been Deleted",s.requests),T.to(e.id).emit("deletedUserRequest",n)}}}catch(e){console.log(e)}})),e.on("refuseRoomRequest",o=>n(this,void 0,void 0,function*(){let{token:t,roomName:n,person:s}=o;try{let o=yield y.default.findOne({token:t});if(null==o)return void console.log("The Session Doesn't Exist");{let t=yield p.default.findById(o.user);if(null==t)return void console.log("The User Doesn't Exist");{let o=yield v.default.findOne({name:n});if(!o)return void console.log("The room doesn't exist");{let t=o.requests.indexOf(s);if(-1===t)return void console.log("The Request Doesn't exist");yield o.requests.splice(t,1),yield o.save(),T.to(e.id).emit("roomRequestAccepted",{person:s,roomName:n})}}}}catch(e){console.log(e)}})),e.on("joinRequest",o=>n(this,void 0,void 0,function*(){const{token:t,name:n}=o;if(null==n||""===n)T.to(e.id).emit("groupFormError","اكتب اسم المجموعة");else if(n.length<3||n.length>35)T.to(e.id).emit("groupFormError","يجب على اسم المجموعة أن تتكون من 3~35 حرف");else try{let o=yield y.default.findOne({token:t});if(null==o)return void console.log("The Session is Expired");{let t=yield p.default.findById(o.user);if(null==t)return void console.log("The User doesn't exist");{let o=yield v.default.findOne({name:n});if(null==o)return console.log("The Room doesn't exist"),void T.to(e.id).emit("groupFormError","لا توجد هذه مجموعة");{let n=yield o.requests.indexOf(t.username);if(-1!==(yield o.users.indexOf(t._id)))T.to(e.id).emit("groupFormError","أنت عضو في هذه المجموعة");else if(-1===n){yield o.requests.push(t.username);let n=yield o.save();console.log(`${t.username} ==Requests==> ${n.leader} to join ${n.name}`),T.to(e.id).emit("requestSent")}else console.log("The Request already exists"),T.to(e.id).emit("groupFormError","انتظر الرد على طلب الدخول")}}}}catch(e){console.log(e)}})),e.on("acceptRoomRequest",o=>n(this,void 0,void 0,function*(){let{token:t,roomName:n,person:s}=o;try{let o=yield y.default.findOne({token:t});if(!o)return void console.log("The Session Doesn't Exist");if(!(yield p.default.findById(o.user)))return void console.log("The User Doesn't Exist");{let o=yield p.default.findOne({username:s});if(!o)return void console.log("The Person you want to invite doesn't exist");{let t=yield v.default.findOne({name:n});if(!t)return void console.log("The Room Doesn't Exist");if(-1!==(yield t.users.indexOf(o._id)))return void console.log(`${o.username} already exists in ${t.name}`);{yield t.users.push(o._id);let n=yield t.requests.indexOf(o.username);-1!==n?yield t.requests.splice(n,1):console.log("The Request Doesn't Exist");let s=yield t.save();yield o.rooms.push(s._id),o.save(),console.log(`${s.leader} accepted ${o.username}'s request to join ${t.name}`),T.to(e.id).emit("roomRequestAccepted",{person:o.username,roomName:s.name,id:o._id})}}}}catch(e){console.log(e)}})),e.on("disconnect",o=>{console.log(`${e.id} disconnected!!`),console.log("reason",o)})})},function(e,o){e.exports=require("express")},function(e,o){e.exports=require("morgan")},function(e,o){e.exports=require("compression")},function(e,o){e.exports=require("body-parser")},function(e,o){e.exports=require("helmet")},function(e,o){e.exports=require("cors")},function(e,o){e.exports=require("dotenv")},function(e,o){e.exports=require("socket.io")},function(e,o){e.exports=require("http")},function(e,o){e.exports=require("bcryptjs")},function(e,o,t){"use strict";t.r(o);var n=t(0),s=t.n(n);const r=new s.a.Schema({username:{type:String,required:!0,unique:!0,minlength:3,maxlength:35},password:{type:String,required:!0},publicKey:{type:String,required:!0,unique:!0},session:{type:s.a.Schema.Types.ObjectId,ref:"Session",required:!1},avatar:{},rooms:{type:[{type:s.a.Schema.Types.ObjectId,ref:"Room"}],default:[]},requests:{type:[{roomName:String,leader:String}],default:[]},createdAt:{type:Date,default:Date.now}});o.default=s.a.model("User",r)},function(e,o,t){"use strict";t.r(o);var n=t(0),s=t.n(n);const r=new s.a.Schema({createdAt:{type:Date,default:Date.now,expires:"1d"},token:{type:String,unique:!0},user:{type:s.a.Schema.Types.ObjectId,ref:"User"}});o.default=s.a.model("Session",r)},function(e,o,t){"use strict";t.r(o);var n=t(0),s=t.n(n);const r=new s.a.Schema({createdAt:{type:Date,default:Date.now},name:{type:String,unique:!0,required:!0,minlength:3,maxlength:35},avatar:{},requests:{type:[String],default:[]},users:[{type:s.a.Schema.Types.ObjectId,ref:"User"}],leader:String,chat:{type:[{iv:String,msg:String,from:String,to:[{publicKey:String,username:String,key:String}],isImg:Boolean,createdAt:{type:Date,default:Date.now}}],default:[]}});o.default=s.a.model("Room",r)},function(e,o){e.exports=require("crypto")},function(e,o){e.exports=require("crypto-js")},function(e,o){e.exports=require("fs")},function(e,o){e.exports=require("constants")}]);
//# sourceMappingURL=serverBundle.js.map